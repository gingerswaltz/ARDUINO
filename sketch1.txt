// Определение пинов для каждого семисегментного индикатора
const int segmentPins[] = {2, 3, 4, 5, 6, 7, 8};
const int digitPins[] = {9, 10};
const int potentiometerPin = A0; // Пин для подключения потенциометра

// Определение переменных для отслеживания таймера
int timerValue = 1; // Начальное значение таймера
unsigned long previousMillis = 0; // Время последнего обновления

void setup() {
  // Настройка пинов семисегментного индикатора как выходных
  for (int i = 0; i < 7; i++) {
    pinMode(segmentPins[i], OUTPUT);
  }
  for (int i = 0; i < 2; i++) {
    pinMode(digitPins[i], OUTPUT);
  }
}

void loop() {
  // Получение значения с потенциометра
  int potValue = analogRead(potentiometerPin);
  
  // Приведение значения потенциометра к диапазону 1-20
  timerValue = map(potValue, 0, 1023, 1, 20);

  // Получение текущего времени в миллисекундах
  unsigned long currentMillis = millis();

  // Обновление таймера каждую секунду
  if (currentMillis - previousMillis >= 1000) {
    updateDisplay(timerValue); // Обновление семисегментного индикатора
    previousMillis = currentMillis; // Обновление времени последнего обновления
  }
}

void updateDisplay(int value) {
// Разделение значения на две цифры
int onesDigit = value % 10;
int tensDigit = value / 10;

// Выбор соответствующих пинов для каждой цифры
int onesDigitPin = digitPins[0];
int tensDigitPin = digitPins[1];

// Выбор соответствующих сегментов для каждой цифры
int onesSegmentPins[] = {segmentPins[0], segmentPins[1], segmentPins[2], segmentPins[4], segmentPins[5], segmentPins[6]};
int tensSegmentPins[] = {segmentPins[0], segmentPins[1], segmentPins[3], segmentPins[4], segmentPins[5], segmentPins[6]};

// Выключение всех пинов сегментов и цифр перед обновлением
for (int i = 0; i < 7; i++) {
digitalWrite(segmentPins[i], LOW);
}
digitalWrite(onesDigitPin, LOW);
digitalWrite(tensDigitPin, LOW);

// Включение соответствующих сегментов для каждой цифры
for (int i = 0; i < 6; i++) {
digitalWrite(onesSegmentPins[i], (digits[onesDigit] & (1 << i)) != 0);
digitalWrite(tensSegmentPins[i], (digits[tensDigit] & (1 << i)) != 0);
}

// Включение соответствующих цифровых дисплеев
digitalWrite(onesDigitPin, HIGH);
digitalWrite(tensDigitPin, HIGH);
}



